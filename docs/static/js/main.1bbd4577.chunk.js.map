{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","newCategory","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","key","GifExpertApp","setCategories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAmB9C,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAMC,iBAEDJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAa,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC3CN,EAAc,OAOd,2BACEO,KAAK,OACLC,MAAQT,EACRU,SApBoB,SAACP,GACzBF,EAAeE,EAAMQ,OAAOF,Y,uBCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACL,wCACD,mCACTC,EAHe,UACL,wCADK,aAGSC,UAAUH,GAHnB,6BAEN,oCAFM,SAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZjB,kBAgBdM,GAhBc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAClC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAMA,EAAN,OCAOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAiB1C,OAVAC,qBAAW,WACTxB,EAASC,GAAWwB,MAAM,SAAAX,GACxBS,EAAS,CACPf,KAAMM,EACNO,SAAS,SAGZ,CAAEpB,IAGEqB,EDb0BI,CAAczB,GAAlCa,EAD0B,EAC/BN,KAAaa,EADkB,EAClBA,QAErB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAEjDoB,GAAW,uBAAGJ,UAAU,yCAAb,WAEX,yBAAKA,UAAU,aAEXH,EAAOJ,KAAK,SAAAiB,GAAK,OACf,kBAAC,EAAD,eACEC,IAAMD,EAAMf,IACPe,UEhBRE,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,gBADd,mBACzBQ,EADyB,KACbmC,EADa,KAIhC,OACE,oCACE,8CACA,kBAAC,EAAD,CAAa5C,YAAc4C,IAC3B,6BAEA,4BAEInC,EAAWe,KAAK,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CACE2B,IAAM3B,EACNA,SAAWA,U,MCVzB8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.1bbd4577.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ newCategory }) => {\n  const [inputValue, setInputValue] = useState('');\n\n\n  const handleInputChange = (event) => {\n    setInputValue( event.target.value );\n  }\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    if ( inputValue.trim().length > 2 ) {\n      newCategory( categories => [inputValue, ...categories] );\n      setInputValue('');\n    }\n  }\n\n\n  return (\n    <form onSubmit={ handleSubmit } >\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\n\nAddCategory.propTypes = {\n  newCategory: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n  const urlBase = 'https://api.giphy.com/v1/gifs/search?';\n  const apiKey = 'vzjvKeO6aO8ny7ShoR4tHc6BGWK5EPl6';\n  const url = `${ urlBase }q=${ encodeURI(category) }&limit=10&api_key=${ apiKey }`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p> { title } </p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\n\nexport const GifGrid = ({ category }) => {\n  const { data:images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      { loading && <p className=\"card animate__animated animate__flash\">Loading</p> }\n\n        <div className=\"card-grid\">\n          {\n            images.map( image => (\n              <GifGridItem \n                key={ image.id }\n                { ...image }\n              />\n            ))\n          }\n        </div>\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n\n  useEffect( () => {\n    getGifs( category ).then( images => {\n      setState({\n        data: images,\n        loading: false\n      })\n    });\n  }, [ category ] );\n\n\n  return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Bob Esponja']);\n\n  \n  return (\n    <>\n      <h2> GifExpertApp </h2>\n      <AddCategory newCategory={ setCategories } />\n      <hr />\n\n      <ol>\n        { \n          categories.map( category => (\n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}